#! /usr/bin/env python
# pylint: disable=unused-wildcard-import
import sys
import numpy as np
from intcode import IntComputer
from util import data, lmap


PRINT_ASM = False


def p1(inp, debug=False):
    scaffolds = ''.join(map(chr, IntComputer(inp, name="ASCII", debug=debug).run()))
    scaffolds = np.array(lmap(list, scaffolds.strip().splitlines()))

    psum = 0
    for x in range(1, scaffolds.shape[0] - 1):
        for y in range(1, scaffolds.shape[1] - 1):
            if scaffolds[x, y] == '#' and scaffolds[x + 1, y] == '#' and scaffolds[x, y + 1] == '#' and scaffolds[x - 1, y] == '#' and scaffolds[x, y - 1] == '#':
                psum += x * y
    return psum


def p2(inp, debug=False):
    program = """A,B,A,B,C,B,A,C,B,C
L,12,L,8,R,10,R,10
L,6,L,4,L,12
R,10,L,8,L,4,R,10
n
"""
# Solved by hand; notes:
# ................................#####..............
# ................................#...#..............
# ................................#...#..............
# ................................#...#..............
# ................................#...#..............
# ................................#...#..............
# ..........................###########..............
# ..........................#.....#..................
# ..........................#.....#..................
# ..........................#.....#..................
# ..........................#.....#..................
# ..........................#.....#..................
# ......................###########..................
# ......................#...#........................
# ......................#...#........................
# ......................#...#........................
# ......................#...#########................
# ......................#...........#................
# ..........#...........#...........#................
# ..........#...........#...........#................
# ..........#...........#####.......#................
# ..........#...............#.......#................
# ..........#...............#.......#................
# ..........#...............#.......#................
# ..........#...........#######.....#................
# ..........#...........#...#.#.....#................
# ..........#.........#############.#...#############
# ..........#.........#.#...#.#...#.#...#............
# ..........#####.....#.#############...#............
# ..............#.....#.....#.#...#.....#............
# ..............#.....#.....#######.....#............
# ..............#.....#.......#.........#............
# ..............#.....#.......#.........#............
# ..............#.....#.......#.........#............
# ..............#.....#.......###########............
# ..............#.....#..............................
# ....###########.....#..............................
# ....#...............#..............................
# ....#.....#########.#########......................
# ....#.....#.......#.........#......................
# ....#.....#.......#.........#......................
# ....#.....#.......#.........#......................
# ###########.......#.........#......................
# #...#.............#.........#......................
# #...#.............#.........#......................
# #...#.............#.........#......................
# #...#.............#.........#......................
# #...#.............#.........#......................
# #####.............###########......................
# L,12,L,8,R,10,R,10,L,6,L,4,L,12,L,12,L,8,R,10,R,10,L,6,L,4,L,12,R,10,L,8,L,4,R,10,L,6,L,4,L,12,L,12,L,8,R,10,R,10,R,10,L,8,L,4,R,10,L6,L4,L12,R,10,L,8,L,4,R,10
# LFFFFFFFFFFFFLFFFFFFFFRFFFFFFFFFFRFFFFFFFFFF LFFFFFFLFFFFLFFFFFFFFFFFF LFFFFFFFFFFFFLFFFFFFFFRFFFFFFFFFFRFFFFFFFFFF LFFFFFFLFFFFLFFFFFFFFFFFF RFFFFFFFFFFLFFFFFFFFLFFFFRFFFFFFFFFF LFFFFFFLFFFFLFFFFFFFFFFFF LFFFFFFFFFFFFLFFFFFFFFRFFFFFFFFFFRFFFFFFFFFF RFFFFFFFFFFLFFFFFFFFLFFFFRFFFFFFFFFF LFFFFFFLFFFFLFFFFFFFFFFFF RFFFFFFFFFFLFFFFFFFFLFFFFRFFFFFFFFFF
# L,12,L,8,R,10,R,10
# L,6,L,4,L,12
# R,10,L,8,L,4,R,10
# ABABCBACBC

    ret = -1
    def write(val):
        nonlocal ret
        if val < 128:
            sys.stdout.write(chr(val))
        else:
            ret = val

    IntComputer("2" + inp[1:], name="ASCII", inp=lmap(ord, program), writef=write, debug=debug).run()
    return ret


def main():
    inp = data()

    p1result, p2result = p1(inp, debug=PRINT_ASM), p2(inp, debug=PRINT_ASM)

    print(f"Solution for part 1:\n{p1result}")
    print(f"Solution for part 2:\n{p2result}")


if __name__ == "__main__":
    main()

# Solution part 1: 6520
# Solution part 2: 1071369
